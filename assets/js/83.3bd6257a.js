(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{497:function(v,_,a){"use strict";a.r(_);var t=a(62),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-引擎-v8-的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-引擎-v8-的工作原理"}},[v._v("#")]),v._v(" JavaScript 引擎 V8 的工作原理")]),v._v(" "),a("h2",{attrs:{id:"_1-引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-引言"}},[v._v("#")]),v._v(" 1. 引言")]),v._v(" "),a("p",[v._v("JavaScript 作为一门脚本语言，在诞生之初性能并不突出，被很多人认为是一门玩具语言。但是，随着 JavaScript 的广泛使用，尤其是后来出现的 AJAX 技术，使得 JavaScript 性能成为一个不可忽视的问题。")]),v._v(" "),a("p",[v._v("为了解决 JavaScript 的性能问题，浏览器厂商开发了 JavaScript 引擎，其中 Chrome 的 V8 引擎是其中最成功的例子。V8 引擎极大地提高了 JavaScript 的执行效率，使其性能有了质的飞跃。V8 不仅被 Chrome 浏览器使用，Node.js 这一流行的服务器端 JavaScript 运行环境也是基于 V8 构建的。")]),v._v(" "),a("p",[v._v("V8 引擎的作用是编译 JavaScript 代码并执行已编译的代码。它包含一个编译器，可以即时地将 JavaScript 代码编译成机器代码;还包含了各种优化手段，可以生成性能很好的代码。借助 V8，JavaScript 的运行效率可以媲美二进制可执行文件的本地代码，把 JavaScript 真正变成一种高性能语言。")]),v._v(" "),a("p",[v._v("本文将深入探讨 V8 引擎的工作原理，包括它的整体架构、编译流程、各种优化技术以及垃圾回收机制等，帮助读者全面了解这个将 JavaScript 带入高性能时代的重要技术。")]),v._v(" "),a("h2",{attrs:{id:"_2-v8-架构概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-v8-架构概览"}},[v._v("#")]),v._v(" 2. V8 架构概览")]),v._v(" "),a("p",[v._v("V8 采用了经典的编译器架构设计，可以分为分前端、优化编译器、后端三个主要模块，其工作流程如下图所示:\n"),a("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/08/7f81b9b58b95ccfa0cee828eac417fdd.webp",alt:""}})]),v._v(" "),a("p",[v._v("前端主要完成解析和抽象语法树(AST)的生成。它会使用递归下降解析法来解析 JavaScript 代码，同时构建对应的 AST。抽象语法树是编译的一个中间表示形式。")]),v._v(" "),a("p",[v._v("优化编译器会对 AST 进行各种分析和优化，目的是生成更高效的机器代码。V8 实现了内联缓存、隐藏类、字节码生成等技术。优化编译器产生的中间代码会传入后端。")]),v._v(" "),a("p",[v._v("后端会将中间代码转换为特定硬件平台的机器代码，也就是直接可以在 CPU 上执行的二进制指令。这里涉及寄存器分配、指令选择等过程。")]),v._v(" "),a("p",[v._v("除了编译器，V8 还包含垃圾回收、内存分配等模块。所有这些模块共同协作，使得 JavaScript 代码可以高效执行。")]),v._v(" "),a("p",[v._v("V8 通过即时编译和代码缓存技术实现了编译与执行的统一。它不需要单独的预编译步骤，可以直接对代码进行即时编译并立即执行。")]),v._v(" "),a("h2",{attrs:{id:"_3-v8的编译与执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-v8的编译与执行"}},[v._v("#")]),v._v(" 3. V8的编译与执行")]),v._v(" "),a("p",[v._v("V8可以在代码执行的同时对其进行即时(Just-In-Time)编译。")]),v._v(" "),a("p",[v._v("编译分为以下几个阶段:")]),v._v(" "),a("ol",[a("li",[v._v("解析 - 将JavaScript代码转换成一系列语句。")]),v._v(" "),a("li",[v._v("AST生成 - 构建抽象语法树， Capture语言结构。")]),v._v(" "),a("li",[v._v("静态分析 - 收集变量作用域信息等。")]),v._v(" "),a("li",[v._v("代码生成 - 将AST转换为更简单的字节码。")]),v._v(" "),a("li",[v._v("优化 - 对字节码进行各种优化，比如内联函数等。")]),v._v(" "),a("li",[v._v("机器代码生成 - 将优化后的字节码变为特定平台的机器代码。")])]),v._v(" "),a("p",[v._v("V8会把编译后的代码存储在代码缓存中，下次执行同一段代码时可以直接取出执行，省去重复编译的时间。")]),v._v(" "),a("p",[v._v("执行编译后的代码主要以下几步:")]),v._v(" "),a("ol",[a("li",[v._v("查找代码缓存，如果存在就取出执行。")]),v._v(" "),a("li",[v._v("如果缓存不存在，加载代码并即时编译。")]),v._v(" "),a("li",[v._v("执行编译生成的机器代码。")]),v._v(" "),a("li",[v._v("把执行结果返回给JavaScript环境。")]),v._v(" "),a("li",[v._v("对热点代码进行各种优化。")])]),v._v(" "),a("p",[v._v("这样，V8实现了编译与执行的统一，JavaScript代码直接就可以高效运行，而不需要额外的编译步骤。")]),v._v(" "),a("h2",{attrs:{id:"_4-v8的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-v8的优化"}},[v._v("#")]),v._v(" 4. V8的优化")]),v._v(" "),a("p",[v._v("为了生成性能更好的代码，V8引擎使用了各种优化技术。\nV8的编译器会生成简单的非优化代码。而优化编译器则可以对热点代码进行更复杂的优化。")]),v._v(" "),a("p",[v._v("主要的优化技术包括:")]),v._v(" "),a("ul",[a("li",[v._v("内联缓存 - 缓存函数的调用地址，省去查找步骤。")]),v._v(" "),a("li",[v._v("隐藏类 - 追踪对象的结构变化，实现精准内存对齐。")]),v._v(" "),a("li",[v._v("逃逸分析 - 分析哪些对象会逃逸出当前环境，对其进行优化。")]),v._v(" "),a("li",[v._v("循环优化 - 改写循环，减少不必要的跳转。")]),v._v(" "),a("li",[v._v("内联函数 - 将热点函数内联到调用处。")]),v._v(" "),a("li",[v._v("寄存器分配 - 减少内存访问，多使用寄存器。")]),v._v(" "),a("li",[v._v("代码打包 - 减少函数调用开销。")]),v._v(" "),a("li")]),v._v(" "),a("p",[v._v("此外，V8还会保存热点代码的优化结果，避免每次执行都要重新优化。\n这些优化技术可以明显地减少内存访问，提高代码的执行效率，一起使V8生成的代码可以达到接近C++的执行速度。")]),v._v(" "),a("h2",{attrs:{id:"_5-v8的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-v8的垃圾回收"}},[v._v("#")]),v._v(" 5. V8的垃圾回收")]),v._v(" "),a("p",[a("RouterLink",{attrs:{to:"/最佳实践/垃圾回收机制/"}},[v._v("垃圾回收机制")])],1),v._v(" "),a("p",[v._v("JavaScript是一种具有自动垃圾回收机制的语言，不需要程序员手动管理内存。\nV8使用了分代式垃圾回收机制。对象分为新生代和老生代两部分:")]),v._v(" "),a("ul",[a("li",[v._v("新生代对象存活时间较短，使用Scavenge算法快速回收。")]),v._v(" "),a("li",[v._v("老生代对象存活时间更长，使用Mark-Sweep和Mark-Compact算法回收。")])]),v._v(" "),a("p",[v._v("Scavenge算法将内存分为两块，每次仅回收其中一块，这样可以使得另一块内存依然可用，避免程序暂停。")]),v._v(" "),a("p",[v._v("Mark-Sweep算法先标记需要回收的对象，然后清除这些对象所占内存。")]),v._v(" "),a("p",[v._v("Mark-Compact算法也标记需要回收的对象，但会将存活对象移动compact，整理内存。")]),v._v(" "),a("p",[v._v("V8同时还实现了代码的增量标记，可以渐进进行垃圾回收，避免停顿时间过长。")]),v._v(" "),a("p",[v._v("借助这些技术，V8可以自动高效地管理JavaScript需要的大量内存，不需要程序员操心内存问题。")]),v._v(" "),a("h2",{attrs:{id:"_6-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[v._v("#")]),v._v(" 6. 总结")]),v._v(" "),a("p",[v._v("V8作为Chrome和Node.js中的JavaScript执行引擎，使用即时编译和代码缓存技术将解释执行转变为编译执行，大幅提升了JavaScript代码的执行性能。")]),v._v(" "),a("p",[v._v("V8具有完整的编译器前端，可以将JavaScript代码编译为抽象语法树，然后经过一系列优化编译生成机器代码。各种优化技术如内联缓存、隐藏类等使得代码运行效率显著提高。")]),v._v(" "),a("p",[v._v("V8还使用了分代垃圾回收机制，通过不同算法安全高效地自动管理JavaScript中的内存。")]),v._v(" "),a("p",[v._v("综上所述，V8为JavaScript带来了巨大的性能提升，使其可以用于更广泛的应用场景。")])])}),[],!1,null,null,null);_.default=r.exports}}]);