(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{441:function(t,s,a){"use strict";a.r(s);var e=a(62),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"深入模块import-和-commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入模块import-和-commonjs"}},[t._v("#")]),t._v(" 深入模块Import 和 CommonJS")]),t._v(" "),a("h2",{attrs:{id:"import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[t._v("#")]),t._v(" Import")]),t._v(" "),a("p",[t._v("ES6的模块是基于"),a("code",[t._v('<script type="module">')]),t._v(" attribute 来告诉浏览器，该文件是模块。")]),t._v(" "),a("p",[t._v("使用了"),a("code",[t._v('<script type="module">')]),t._v("就可以使用 import/export")]),t._v(" "),a("p",[t._v("模块相对于一般的脚本差别：\n- 默认延迟解析（deferred）\n- Async 可用于内联脚本 就是说 在script 上添加 attribute async 后，里面的 "),a("code",[t._v("import {xxx} from './xxx.js'")]),t._v(" 会异步执行。\n- 如果跨域请求外部脚本的话需要再header中允许\n- 重复的模块脚本会被忽略")]),t._v(" "),a("p",[t._v("ESM的特性")]),t._v(" "),a("ul",[a("li",[t._v("有自己的作用域，可以使用 "),a("code",[t._v("import/export")]),t._v(" 交换功能")]),t._v(" "),a("li",[t._v("始终 严格模式")]),t._v(" "),a("li",[t._v("值会执行一次。导出仅创建一次，然后在导入之间共享。")])]),t._v(" "),a("h3",{attrs:{id:"动态导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态导入"}},[t._v("#")]),t._v(" 动态导入")]),t._v(" "),a("p",[t._v("import(module) 加载模块并返回一个promise")]),t._v(" "),a("h2",{attrs:{id:"commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[t._v("#")]),t._v(" CommonJS")]),t._v(" "),a("p",[t._v("CommonJS 是 通过 require/module.exports 来导入")]),t._v(" "),a("p",[t._v("通过一个立即执行函数来形成闭包，保证作用域的干净")]),t._v(" "),a("p",[t._v("require是一个函数，如下实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义导入类，参数为模块路径")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("modulePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前要加载的绝对路径")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" absPathname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modulePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建模块，新建Module实例")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" module "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absPathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载当前模块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryModuleLoad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回exports对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("整理实现步骤")]),t._v(" "),a("ol",[a("li",[t._v("导入相关模块，创建一个require方法")]),t._v(" "),a("li",[t._v("抽离通过Module._load方法，用于加载模块。")]),t._v(" "),a("li",[t._v("Module.resolveFilename 根据相对路径，转换成绝对路径。")]),t._v(" "),a("li",[t._v("Module._cache 缓存模块 不重复加载")]),t._v(" "),a("li",[t._v("创建模块id属性保存内容是exports = {}，相当于this")]),t._v(" "),a("li",[t._v("利用tryModuleLoad(module, filename) 尝试加载模块。")]),t._v(" "),a("li",[t._v("Module._extensions使用读取文件。")]),t._v(" "),a("li",[t._v("Module.wrap: 把读取到的js包裹一个函数。")]),t._v(" "),a("li",[t._v("将拿到的字符串使用runInThisContext运行字符串。")]),t._v(" "),a("li",[t._v("让字符串执行并将this改编成exports。")])]),t._v(" "),a("h2",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[t._v("CommonJS 是同步的 ESM 是默认异步的（应为是基于script的attribute），后者不影响浏览器渲染")]),t._v(" "),a("li",[t._v("CommonJS是值的拷贝，改变导出值，需要重新导入（应为是立即执行函数，已经执行过了），后者是利用浏览器的导入，实时绑定，导入导出指向同一内存地址。")]),t._v(" "),a("li",[t._v("ESM 会编译成 require/exports 来执行")])])])}),[],!1,null,null,null);s.default=n.exports}}]);