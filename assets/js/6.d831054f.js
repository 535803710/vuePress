(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{414:function(t,a,e){t.exports=e.p+"assets/img/2ecc92d59da449bca013bf291ea7df00~tplv-k3u1fbpfcp-watermark.image.64d076de.png"},436:function(t,a,e){"use strict";e.r(a);var v=e(62),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"词法环境和闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#词法环境和闭包"}},[t._v("#")]),t._v(" 词法环境和闭包")]),t._v(" "),v("h2",{attrs:{id:"词法环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#词法环境"}},[t._v("#")]),t._v(" 词法环境")]),t._v(" "),v("p",[t._v("每个代码块{...}，脚本，函数，都有一个词法环境的内部关联对象")]),t._v(" "),v("p",[t._v("这个词法环境对象的内部有两个东西")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("环境记录 ：存储了全部的局部变量（包括一些其他信息 this的值）的对象")])]),t._v(" "),v("li",[v("p",[t._v("外部环境的引用")])])]),t._v(" "),v("h3",{attrs:{id:"_1-变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量"}},[t._v("#")]),t._v(" 1.变量")]),t._v(" "),v("p",[t._v("变量是 环境记录 的一个属性。获取或者修改变量相当于 获取或者修改了词法环境对象 的一个属性")]),t._v(" "),v("p",[t._v("举例")]),t._v(" "),v("p",[v("img",{attrs:{src:e(414),alt:"image.png"}})]),t._v(" "),v("p",[t._v("上面的例子只有一个词法环境，\n"),v("strong",[t._v("框内表示环境记录对象")]),t._v("，"),v("strong",[t._v("箭头表示外部引用")]),t._v("（由于没有外部引用，全局词法环境没有外部引用所以是null）")]),t._v(" "),v("p",[t._v("这跟原型链很像是不是！Object的原型指向null")]),t._v(" "),v("p",[v("strong",[t._v("下面继续")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/8476482e19351e24c915ec748b4b0155.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("先申明一个变量\n右边的词法环境变化")]),t._v(" "),v("ol",[v("li",[t._v("脚本开始 词法环境预先填充所有声明的变量\n"),v("ul",[v("li",[t._v("最初他们处于未初始化状态（Uninitialized）是一种特殊的内部状态，引擎知道存在，但是在let声明之前不能引用，就像变量不存在一样。")])])]),t._v(" "),v("li",[t._v("let phrase定义出现，这时候未被赋值，")]),t._v(" "),v("li",[t._v("赋值为Hello")]),t._v(" "),v("li",[t._v("值被修改")])]),t._v(" "),v("p",[t._v("现在来说")]),t._v(" "),v("ul",[v("li",[t._v("变量是词法环境的一个属性，与当前执行的函数，代码块，脚本有关系")]),t._v(" "),v("li",[t._v("操作变量是操作对象的属性")])]),t._v(" "),v("blockquote",[v("p",[t._v("“词法环境”是一个规范对象（specification object）：它仅仅是存在于 "),v("a",{attrs:{href:"https://tc39.es/ecma262/#sec-lexical-environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程语言规范"),v("OutboundLink")],1),t._v(" 中的“理论上”存在的，用于描述事物如何运作的对象。我们无法在代码中获取该对象并直接对其进行操作。")]),t._v(" "),v("p",[t._v("但 JavaScript 引擎同样可以优化它，比如清除未被使用的变量以节省内存和执行其他内部技巧等，但显性行为应该是和上述的无差。")])]),t._v(" "),v("h3",{attrs:{id:"_2-函数声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数声明"}},[t._v("#")]),t._v(" 2.函数声明")]),t._v(" "),v("p",[t._v("一个函数也是一个值，就像变量一样。")]),t._v(" "),v("p",[v("strong",[t._v("不同的是函数在声明后立刻完成初始化")])]),t._v(" "),v("p",[t._v("当创建一个词法环境的时候，函数声明会立即初始化完成，\n而不是像变量一样要let声明后才能用，所以我们可以再函数声明前调用函数。")]),t._v(" "),v("p",[t._v("例如，这是添加一个函数时全局词法环境的初始状态：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/f0bfe558a59722ab9cf64597a7dad5dc.png",alt:"image.png"}}),t._v(" "),t._v("\n这种只适用于函数声明，不适用于将函数赋值给变量例如 "),v("code",[t._v("let say = function(name)...")])]),t._v(" "),v("h3",{attrs:{id:"_3-内部和外部的词法环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-内部和外部的词法环境"}},[t._v("#")]),t._v(" 3.内部和外部的词法环境")]),t._v(" "),v("p",[t._v("函数在运行的时候，会自动创建一个新的词法环境，存储调用的局部变量和参数")]),t._v(" "),v("p",[t._v("例如，对于 "),v("code",[t._v('say("John")')]),t._v("，它看起来像这样（当前执行位置在箭头标记的那一行上）：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/f23b2f954489248a25070536ae6428ad.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("在函数运行的时候，我们得到两个词法环境： 一个是函数内部的词法环境，一个是全局词法环境")]),t._v(" "),v("p",[t._v("可以看到图中的竖线|分割开（左边是函数内部词法环境）（右边是外部全局词法环境）")]),t._v(" "),v("ul",[v("li",[t._v("内部词法环境与"),v("code",[t._v("say")]),t._v("当前执行相对应，有一个局部变量"),v("code",[t._v("name")]),t._v("作为当前词法环境的一个属性，调用的是"),v("code",[t._v("say(John)")]),t._v("所以"),v("code",[t._v("name")]),t._v("的值是John")]),t._v(" "),v("li",[t._v("外部词法环境是全局词法环境，包含了phrase变量和say函数")])]),t._v(" "),v("p",[t._v("内部词法环境引用了外部环境")]),t._v(" "),v("p",[v("strong",[t._v("当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。")])]),t._v(" "),v("p",[t._v("在任何地方都找不到的话，严格模式会报错。非严格模式会在全局创建一个变量\n上面例子搜索过程如下")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("name")]),t._v("在内部词法环境查找，在"),v("code",[t._v("alert")]),t._v("试图访问"),v("code",[t._v("name")]),t._v("时可以找到")]),t._v(" "),v("li",[t._v("在试图访问"),v("code",[t._v("phrase")]),t._v("时发现当前词法环境没有，顺着外部词法环境找到")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/07e2546c07513af05d847973e0e7b572.png",alt:"image.png"}})]),t._v(" "),v("h3",{attrs:{id:"_4-返回函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-返回函数"}},[t._v("#")]),t._v(" 4.返回函数")]),t._v(" "),v("p",[t._v("看到这个例子")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCounter")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("、\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCounter")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("在调用"),v("code",[t._v("makeCounter()")]),t._v("开始，都会创建一个新的词法环境，存储"),v("code",[t._v("makeCounter")]),t._v("运行是的变量")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/bf6dc4b3a37ce97c598426e053190dcd.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("不同的是在执行"),v("code",[t._v("makeCounter()")]),t._v("时只是创建了一个嵌套函数："),v("code",[t._v("return count++")]),t._v("，这时没有运行，只是创建")]),t._v(" "),v("p",[t._v("所有函数在“出生”时都会记住创建他们的词法环境，不是什么魔法，每个函数都有"),v("code",[t._v("[[Enviroment]]")]),t._v("隐藏属性，保存了对创建该函数的词法环境的引用。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/6659a933112145e55d9a117ed902051e.png",alt:"image.png"}}),t._v(" "),t._v("\n所以 "),v("code",[t._v("cunter.[[Enviroment]]")]),t._v("有对"),v("code",[t._v("count:0")]),t._v("词法环境的引用。这就是函数记住他创建于何处的方式，与函数在哪调用无关。"),v("code",[t._v("[[Environment]]")]),t._v("引用在函数创建的时候就被永久保存了")]),t._v(" "),v("p",[t._v("等会在调用"),v("code",[t._v("counter()")]),t._v("时，会创构建一个新的词法环境，并且其外部词法环境引用于"),v("code",[t._v("counter().[[Environment]]")]),t._v(" "),v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/ac941f94bb914e9ad85398c0568336ee.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("现在，调用"),v("code",[t._v("counter()")]),t._v("时查找count变量，首先查找自己的词法环境，没有找到（因为没有局部变量），向上找外部的词法环境（"),v("code",[t._v("makeCounter()")]),t._v("的词法环境），找到然后修改。")]),t._v(" "),v("p",[v("strong",[t._v("在变量所在的词法环境中更新变量。")])]),t._v(" "),v("p",[t._v("下面是执行后的状态\n"),v("img",{attrs:{src:"https://pub-a953275fa2c34c18b80fc1f84e3ea746.r2.dev/xiaowo/2023/07/c07dd2f77d0abfdd336a6cdfa3288e77.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("如果我们调用 "),v("code",[t._v("counter()")]),t._v(" 多次，"),v("code",[t._v("count")]),t._v(" 变量将在同一位置增加到 "),v("code",[t._v("2")]),t._v("，"),v("code",[t._v("3")]),t._v(" 等。")]),t._v(" "),v("blockquote",[v("h4",{attrs:{id:"闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),v("p",[t._v("开发者通常应该都知道“闭包”这个通用的编程术语。")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Closure_(computer_programming)",target:"_blank",rel:"noopener noreferrer"}},[t._v("闭包"),v("OutboundLink")],1),t._v(" 是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。在某些编程语言中，这是不可能的，或者应该以特殊的方式编写函数来实现。但是如上所述，在 JavaScript 中，所有函数都是天生闭包的（只有一个例外，将在 "),v("a",{attrs:{href:"https://zh.javascript.info/new-function",target:"_blank",rel:"noopener noreferrer"}},[t._v('"new Function" 语法'),v("OutboundLink")],1),t._v(" 中讲到）。")]),t._v(" "),v("p",[t._v("也就是说：JavaScript 中的函数会自动通过隐藏的 "),v("code",[t._v("[[Environment]]")]),t._v(" 属性记住创建它们的位置，所以它们都可以访问外部变量。")]),t._v(" "),v("p",[t._v("在面试时，前端开发者通常会被问到“什么是闭包？”，正确的回答应该是闭包的定义，并解释清楚为什么 JavaScript 中的所有函数都是闭包的，以及可能的关于 "),v("code",[t._v("[[Environment]]")]),t._v(" 属性和词法环境原理的技术细节。")])]),t._v(" "),v("h2",{attrs:{id:"参考文献"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),v("p",[t._v("https://zh.javascript.info/closure#ci-fa-huan-jing")])])}),[],!1,null,null,null);a.default=_.exports}}]);