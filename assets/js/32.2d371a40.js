(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{447:function(t,s,a){"use strict";a.r(s);var n=a(62),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"自定义-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hooks"}},[t._v("#")]),t._v(" 自定义 hooks")]),t._v(" "),a("p",[t._v("自定义 Hooks 是 React Hooks 聚合产物，内部有一个或多个 React Hooks 组成的纯函数。解决业务逻辑复杂的情况")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useXXX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("参数"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n     ...自定义 hooks 逻辑\n     内部应用了其他 React Hooks —— useState | useEffect | useRef ...\n    */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("自定义 hooks 参数可能是以下内容：")])]),t._v(" "),a("ol",[a("li",[t._v("hooks 初始化值。")]),t._v(" "),a("li",[t._v("一些副作用或事件的回调函数。")]),t._v(" "),a("li",[t._v("可以是 useRef 获取的 DOM 元素或者组件实例。")]),t._v(" "),a("li",[t._v("不需要参数")])]),t._v(" "),a("p",[a("strong",[t._v("自定义 hooks 返回值可能是以下内容：")])]),t._v(" "),a("ol",[a("li",[t._v("负责渲染视图获取的状态。")]),t._v(" "),a("li",[t._v("更新函数组件方法，本质上是 useState 或者 useReducer。")]),t._v(" "),a("li",[t._v("一些传递给子孙组件的状态。")]),t._v(" "),a("li",[t._v("没有返回值。")])]),t._v(" "),a("h2",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("h4",{attrs:{id:"驱动条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#驱动条件"}},[t._v("#")]),t._v(" 驱动条件")]),t._v(" "),a("p",[t._v("本质是一个函数，在函数组件中执行，所以"),a("strong",[t._v("自定义 hooks 驱动本质上就是函数组件的执行。")])]),t._v(" "),a("ul",[a("li",[t._v("props 改变使组件执行")]),t._v(" "),a("li",[t._v("useState | useReducer 改变 state 引发组件更新")])]),t._v(" "),a("h4",{attrs:{id:"顺序原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序原则"}},[t._v("#")]),t._v(" 顺序原则")]),t._v(" "),a("p",[t._v("因为自定义内部要执行 react hoosk 所以也要保持 hooks 规则")]),t._v(" "),a("p",[a("strong",[t._v("不能放在条件语句中，而且要保持执行顺序的一致性。")]),t._v("\n因为 hooks 在创建的时候会 通过 next 建立链表 会按照顺序执行，改变顺序 会导致 hooks 不能复用 找不到")]),t._v(" "),a("h4",{attrs:{id:"条件限定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件限定"}},[t._v("#")]),t._v(" 条件限定")]),t._v(" "),a("p",[t._v("问题代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useXXX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("defaultContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* .....用上下文中 value 一段初始化逻辑  */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initValueFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 初始化 value 得到新的 newValue  */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ...... */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("每一次函数组件更新，就会执行此自定义 hooks ，那么就会重复执行初始化逻辑，重复执行 initValueFunction ，每一次都会得到一个最新的 newValue 。 如果 newValue 作为 useMemo 和 useEffect 的 deps ，或者作为子组件的 props ，那么子组件的浅比较 props 将失去作用。")]),t._v(" "),a("p",[t._v("增加条件限定，useRef 保存初始值，或者用useMemo执行")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useXXX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 创建一个 value 保存状态。  */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("defaultContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果 newValue 不存在 */")]),t._v("\n    newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initValueFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"考虑可变性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考虑可变性"}},[t._v("#")]),t._v(" 考虑可变性")]),t._v(" "),a("p",[t._v("什么叫做可变性，就是"),a("strong",[t._v("考虑一些状态值发生变化，是否有依赖于当前值变化的执行逻辑或执行副作用。")])]),t._v(" "),a("h4",{attrs:{id:"闭包效应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包效应"}},[t._v("#")]),t._v(" 闭包效应")]),t._v(" "),a("p",[t._v("就是执行的时候添加依赖")])])}),[],!1,null,null,null);s.default=e.exports}}]);