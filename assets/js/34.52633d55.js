(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{448:function(t,r,s){"use strict";s.r(r);var e=s(62),a=Object(e.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-不完全指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-不完全指南"}},[t._v("#")]),t._v(" TypeScript 不完全指南")]),t._v(" "),s("p",[t._v("要解决灵活性带来的隐患，我们需要的是类型。更准确地说，是项目开发时的类型检查能力。")]),t._v(" "),s("h2",{attrs:{id:"优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),s("p",[t._v("由于类型的引入，TypeScript 的确限制了 JavaScript 的灵活性，但也增强了项目代码的健壮性，并且对于其他同属于灵活性的代表特性，如 this、原型链、闭包以及函数等，TypeScript 丝毫没有限制。")]),t._v(" "),s("h2",{attrs:{id:"typescript-的组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-的组成"}},[t._v("#")]),t._v(" TypeScript 的组成")]),t._v(" "),s("p",[t._v("类型、语法、工程")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("类型能力")]),t._v(" 它是最核心的部分，也是学习成本最高的部分。它为 JavaScript 中的变量、函数等概念提供了类型的标注，同时内置了一批类型工具，基于这些类型工具我们就能实现更复杂的类型描述，将类型关联起来。")]),t._v(" "),s("li",[s("strong",[t._v("语法部分")]),t._v(" 比如使用最多的可选链（?.）、空值合并（??）、装饰器等，")]),t._v(" "),s("li",[s("strong",[t._v("工程部分")]),t._v(" 通过 TypeScript Compiler（tsc）实现的。tsc 以及 tsc 配置（TSConfig）是 TypeScript 工程层面的重要部分。")])])])}),[],!1,null,null,null);r.default=a.exports}}]);